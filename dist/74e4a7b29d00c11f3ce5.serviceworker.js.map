{"version":3,"sources":["webpack:///74e4a7b29d00c11f3ce5.serviceworker.js","webpack:///webpack/bootstrap 74e4a7b29d00c11f3ce5","webpack:///./src/sw.js","webpack:///./~/whatwg-fetch/fetch.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","h","fetch","CACHE_VERSION","OFFLINE_CACHE","self","addEventListener","event","waitUntil","caches","keys","then","cacheNames","Promise","all","map","cacheName","clients","claim","request","mode","test","url","console","log","respondWith","networkResponse","status","type","open","cache","put","match","response","clone","error","global","normalizeName","name","String","TypeError","toLowerCase","normalizeValue","value","Headers","headers","this","forEach","append","Object","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","resolve","onload","result","onerror","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","support","Blob","prototype","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","arrayBuffer","ArrayBuffer","Error","get","set","rejected","text","decode","json","JSON","parse","normalizeMethod","method","upcased","toUpperCase","methods","indexOf","Request","input","options","credentials","referrer","form","trim","split","bytes","shift","replace","join","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","key","Response","bodyInit","ok","statusText","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","e","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","XMLHttpRequest","responseText","ontimeout","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"74e4a7b29d00c11f3ce5.serviceworker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// __webpack_hash__\n/******/ \t__webpack_require__.h = \"74e4a7b29d00c11f3ce5\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(fetch) {'use strict';\n\t\n\tvar CACHE_VERSION = __webpack_require__.h;\n\tvar OFFLINE_CACHE = 'OFFLINE-CACHE';\n\t\n\t// Shorthand identifier mapped to specific versioned cache.\n\t\n\tself.addEventListener('activate', function (event) {\n\t\n\t  // Active worker won't be treated as activated until promise resolves successfully.\n\t  event.waitUntil(caches.keys().then(function (cacheNames) {\n\t    return Promise.all(cacheNames.map(function (cacheName) {\n\t      if (cacheName !== CACHE_VERSION && cacheName !== OFFLINE_CACHE) {\n\t        return caches['delete'](cacheName);\n\t      }\n\t    })).then(self.clients.claim());\n\t  }));\n\t});\n\t\n\tself.addEventListener('fetch', function (event) {\n\t  if (event.request.mode === 'cors' && /\\/api\\//.test(event.request.url)) {\n\t    // If it's cors and match  /api/ (probably data),\n\t    // go to the network and if it fails retrieve from cache\n\t    console.log('cors', event.request.url, event.request);\n\t\n\t    var request = event.request;\n\t    event.respondWith(fetch(request).then(function (networkResponse) {\n\t      if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {\n\t        return networkResponse;\n\t      }\n\t\n\t      return caches.open(OFFLINE_CACHE).then(function (cache) {\n\t        return cache.put(event.request.url, networkResponse);\n\t      });\n\t    })['catch'](function () {\n\t      // `fetch()` throws an exception when the server is unreachable but not\n\t      // for valid HTTP responses, even `4xx` or `5xx` range.\n\t      return caches.open(OFFLINE_CACHE).then(function (cache) {\n\t        return cache.match(event.request);\n\t      });\n\t    }));\n\t  } else {\n\t    // If it's an asset or a same-origin file, first try to retrieve\n\t    // from cache and otherwise get it from the network\n\t    event.respondWith(\n\t\n\t    // Opens Cache object\n\t    caches.open(CACHE_VERSION).then(function (cache) {\n\t      return cache.match(event.request).then(function (response) {\n\t        if (response) {\n\t          return response;\n\t        }\n\t\n\t        return fetch(event.request.clone()).then(function (networkResponse) {\n\t\n\t          // if response is “bad”,\n\t          // just pass it back into the app\n\t          if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {\n\t            return networkResponse;\n\t          }\n\t\n\t          // if response is ok, cache it and\n\t          // give it back into the app\n\t          caches.open(CACHE_VERSION).then(function (cache) {\n\t            return cache.put(event.request, networkResponse.clone());\n\t          });\n\t\n\t          return networkResponse;\n\t        });\n\t      })['catch'](function (error) {\n\t\n\t        // Handles exceptions that arise from match() or fetch().\n\t        throw error;\n\t      });\n\t    }));\n\t  }\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\t\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var list = this.map[name]\n\t    if (!list) {\n\t      list = []\n\t      this.map[name] = list\n\t    }\n\t    list.push(value)\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    var values = this.map[normalizeName(name)]\n\t    return values ? values[0] : null\n\t  }\n\t\n\t  Headers.prototype.getAll = function(name) {\n\t    return this.map[normalizeName(name)] || []\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = [normalizeValue(value)]\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n\t      this.map[name].forEach(function(value) {\n\t        callback.call(thisArg, value, name, this)\n\t      }, this)\n\t    }, this)\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsArrayBuffer(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsText(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  var support = {\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (!body) {\n\t        this._bodyText = ''\n\t      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n\t        // Only support ArrayBuffers for POST method.\n\t        // Receiving ArrayBuffers happens via Blobs, instead.\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        return this.blob().then(readBlobAsArrayBuffer)\n\t      }\n\t\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return readBlobAsText(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as text')\n\t        } else {\n\t          return Promise.resolve(this._bodyText)\n\t        }\n\t      }\n\t    } else {\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        return rejected ? rejected : Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t    if (Request.prototype.isPrototypeOf(input)) {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    } else {\n\t      this.url = input\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this)\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function headers(xhr) {\n\t    var head = new Headers()\n\t    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n\t    pairs.forEach(function(header) {\n\t      var split = header.trim().split(':')\n\t      var key = split.shift().trim()\n\t      var value = split.join(':').trim()\n\t      head.append(key, value)\n\t    })\n\t    return head\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = options.status\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = options.statusText\n\t    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request\n\t      if (Request.prototype.isPrototypeOf(input) && !init) {\n\t        request = input\n\t      } else {\n\t        request = new Request(input, init)\n\t      }\n\t\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      function responseURL() {\n\t        if ('responseURL' in xhr) {\n\t          return xhr.responseURL\n\t        }\n\t\n\t        // Avoid security warnings on getResponseHeader when not allowed by CORS\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t          return xhr.getResponseHeader('X-Request-URL')\n\t        }\n\t\n\t        return\n\t      }\n\t\n\t      xhr.onload = function() {\n\t        var status = (xhr.status === 1223) ? 204 : xhr.status\n\t        if (status < 100 || status > 599) {\n\t          reject(new TypeError('Network request failed'))\n\t          return\n\t        }\n\t        var options = {\n\t          status: status,\n\t          statusText: xhr.statusText,\n\t          headers: headers(xhr),\n\t          url: responseURL()\n\t        }\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\t\n\t\n\t/*** EXPORTS FROM exports-loader ***/\n\tmodule.exports = global.fetch;\n\t}.call(global));\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** 74e4a7b29d00c11f3ce5.serviceworker.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// __webpack_hash__\n \t__webpack_require__.h = \"74e4a7b29d00c11f3ce5\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 74e4a7b29d00c11f3ce5\n **/","var CACHE_VERSION = __webpack_hash__;\nvar OFFLINE_CACHE = 'OFFLINE-CACHE';\n\n// Shorthand identifier mapped to specific versioned cache.\n\nself.addEventListener('activate', function(event) {\n\n  // Active worker won't be treated as activated until promise resolves successfully.\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (cacheName !== CACHE_VERSION && cacheName !== OFFLINE_CACHE) {\n            return caches.delete(cacheName);\n          }\n        })\n      ).then(self.clients.claim());\n    })\n  );\n});\n\nself.addEventListener('fetch', function(event) {\n  if (event.request.mode === 'cors' && /\\/api\\//.test(event.request.url)) {\n  // If it's cors and match  /api/ (probably data),\n  // go to the network and if it fails retrieve from cache\n  console.log('cors', event.request.url, event.request);\n\n    var request = event.request;\n    event.respondWith(\n      fetch(request)\n      .then(networkResponse => {\n        if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {\n          return networkResponse;\n        }\n\n        return caches.open(OFFLINE_CACHE)\n          .then((cache) => cache.put(\n            event.request.url, networkResponse));\n      })\n      .catch(() => {\n        // `fetch()` throws an exception when the server is unreachable but not\n        // for valid HTTP responses, even `4xx` or `5xx` range.\n        return caches.open(OFFLINE_CACHE).then(function(cache) {\n          return cache.match(event.request);\n        });\n      })\n    );\n  } else {\n    // If it's an asset or a same-origin file, first try to retrieve\n    // from cache and otherwise get it from the network\n    event.respondWith(\n\n      // Opens Cache object\n      caches.open(CACHE_VERSION).then(function(cache) {\n        return cache.match(event.request).then(function(response) {\n          if (response) {\n            return response;\n          }\n\n          return fetch(event.request.clone())\n          .then(networkResponse => {\n\n            // if response is “bad”,\n            // just pass it back into the app\n            if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {\n              return networkResponse;\n            }\n\n            // if response is ok, cache it and\n            // give it back into the app\n            caches.open(CACHE_VERSION)\n              .then((cache) => cache.put(\n                event.request, networkResponse.clone()));\n\n            return networkResponse;\n          });\n        }).catch(function(error) {\n\n          // Handles exceptions that arise from match() or fetch().\n          throw error;\n        });\n      })\n    );\n  }\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/sw.js\n **/","/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var status = (xhr.status === 1223) ? 204 : xhr.status\n        if (status < 100 || status > 599) {\n          reject(new TypeError('Network request failed'))\n          return\n        }\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = global.fetch;\n}.call(global));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?this=>global!./~/exports-loader?global.fetch!./~/whatwg-fetch/fetch.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}